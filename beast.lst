
AVRASM ver. 1.54  C:\code\beast.asm Thu Jun 02 04:51:23 2005


warning : Register already defined by the .DEF directive
warning : Register already defined by the .DEF directive
         ;Donald Carr
         
          .include "8535def.inc"
         ;***************************************************************************
         ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
         ;* 
         ;* Number				:AVR000
         ;* File Name			:"8535def.inc"
         ;* Title				:Register/Bit Definitions for the AT90S8535
         ;* Date                 :99.01.28
         ;* Version              :1.30
         ;* Support telephone	:+47 72 88 43 88 (ATMEL Norway)
         ;* Support fax			:+47 72 88 43 99 (ATMEL Norway)
         ;* Support E-mail		:avr@atmel.com
         ;* Target MCU			:AT90S8535
         ;*
         ;* DESCRIPTION
         ;* When including this file in the assembly program file, all I/O register	
         ;* names and I/O register bit names appearing in the data book can be used.
         ;* In addition, the six registers forming the three data pointers X, Y and
         ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
         ;* SRAM is also defined 
         ;*
         ;* The Register names are represented by their hexadecimal address.
         ;* 
         ;* The Register Bit names are represented by their bit number (0-7).
         ;* 
         ;* Please observe the difference in using the bit names with instructions
         ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc" 
         ;* (skip if bit in register set/cleared). The following example illustrates
         ;* this:
         ;* 
         ;* in	r16,PORTB				;read PORTB latch
         ;* sbr	r16,(1<<PB6)+(1<<PB5)	;set PB6 and PB5 (use masks, not bit#)
         ;* out  PORTB,r16				;output to PORTB
         ;*
         ;* in	r16,TIFR				;read the Timer Interrupt Flag Register
         ;* sbrc	r16,TOV0				;test the overflow flag (use bit#)
         ;* rjmp	TOV0_is_set				;jump if set
         ;* ...							;otherwise do something else
         ;***************************************************************************
         
         ;***** Specify Device
          .device AT90S8535
         
         ;***** I/O Register Definitions
          .equ	SREG	=$3f
          .equ	SPH		=$3e
          .equ	SPL		=$3d
          .equ	GIMSK	=$3b
          .equ	GIFR	=$3a
          .equ	TIMSK	=$39
          .equ	TIFR	=$38
          .equ	MCUCR	=$35
          .equ	MCUSR	=$34
          .equ	TCCR0	=$33
          .equ	TCNT0	=$32
          .equ	TCCR1A	=$2f
          .equ	TCCR1B	=$2e
          .equ	TCNT1H	=$2d
          .equ	TCNT1L	=$2c
          .equ	OCR1AH	=$2b
          .equ	OCR1AL	=$2a
          .equ	OCR1BH	=$29
          .equ	OCR1BL	=$28
          .equ	ICR1H	=$27
          .equ	ICR1L	=$26
          .equ	TCCR2	=$25
          .equ	TCNT2	=$24
          .equ	OCR2	=$23
          .equ	ASSR	=$22
          .equ	WDTCR	=$21
          .equ	EEARH	=$1f
          .equ	EEARL	=$1e
          .equ	EEDR	=$1d
          .equ	EECR	=$1c
          .equ	PORTA	=$1b
          .equ	DDRA	=$1a
          .equ	PINA	=$19
          .equ	PORTB	=$18
          .equ	DDRB	=$17
          .equ	PINB	=$16
          .equ	PORTC	=$15
          .equ	DDRC	=$14
          .equ	PINC	=$13
          .equ	PORTD	=$12
          .equ	DDRD	=$11
          .equ	PIND	=$10
          .equ	SPDR	=$0f
          .equ	SPSR	=$0e
          .equ	SPCR	=$0d
          .equ	UDR		=$0c
          .equ	USR		=$0b
          .equ	UCR		=$0a
          .equ	UBRR	=$09
          .equ	ACSR	=$08
          .equ    ADMUX   =$07
          .equ    ADCSR   =$06
          .equ    ADCH    =$05
          .equ    ADCL    =$04
         
         
         ;***** Bit Definitions
         ;MCUSR
          .equ	EXTRF	=1
          .equ	PORF	=0
         
         ;GIMSK
          .equ	INT1	=7
          .equ	INT0	=6
         
         ;GIFR
          .equ	INTF1	=7
          .equ	INTF0	=6
         
         ;TIMSK
          .equ	OCIE2	=7
          .equ	TOIE2	=6
          .equ	TICIE1	=5
          .equ	OCIE1A	=4
          .equ	OCIE1B	=3
          .equ	TOIE1	=2
          .equ	TOIE0	=0
         
         ;TIFR
          .equ	OCF2	=7
          .equ	TOV2	=6
          .equ	ICF1	=5
          .equ	OCF1A	=4
          .equ	OCF1B	=3
          .equ	TOV1	=2
          .equ	TOV0	=0
         
         ;MCUCR
          .equ	SE		=6
          .equ	SM1		=5
          .equ	SM0		=4
          .equ	ISC11	=3
          .equ	ISC10	=2
          .equ	ISC01	=1
          .equ	ISC00	=0
         
         ;TCCR0
          .equ	CS02	=2
          .equ	CS01	=1
          .equ	CS00	=0
         
         ;TCCR1A
          .equ	COM1A1	=7
          .equ	COM1A0	=6
          .equ	COM1B1	=5
          .equ	COM1B0	=4
          .equ	PWM11	=1
          .equ	PWM10	=0
         
         ;TCCR1B
          .equ	ICNC1	=7
          .equ	ICES1	=6
          .equ	CTC1	=3
          .equ	CS12	=2
          .equ	CS11	=1
          .equ	CS10	=0
         
         ;TCCR2
          .equ	PWM2	=6
          .equ	COM21	=5
          .equ	COM20	=4
          .equ	CTC2	=3
          .equ	CS22	=2
          .equ	CS21	=1
          .equ	CS20	=0
         
         ;ASSR
          .equ	AS2		=3
          .equ	TCN2UB	=2
          .equ	OCR2UB	=1
          .equ	TCR2UB	=0
         
         ;WDTCR
          .equ	WDTOE	=4
          .equ	WDE		=3
          .equ	WDP2	=2
          .equ	WDP1	=1
          .equ	WDP0	=0
         
         ;EECR
          .equ	EERIE	=3
          .equ	EEMWE	=2
          .equ	EEWE	=1
          .equ	EERE	=0
         
         ;PORTA
          .equ	PA7		=7
          .equ	PA6		=6
          .equ	PA5		=5
          .equ	PA4		=4
          .equ	PA3		=3
          .equ	PA2		=2
          .equ	PA1		=1
          .equ	PA0		=0
         
         ;DDRA
          .equ	DDA7	=7
          .equ	DDA6	=6
          .equ	DDA5	=5
          .equ	DDA4	=4
          .equ	DDA3	=3
          .equ	DDA2	=2
          .equ	DDA1	=1
          .equ	DDA0	=0
         
         ;PINA
          .equ	PINA7	=7
          .equ	PINA6	=6
          .equ	PINA5	=5
          .equ	PINA4	=4
          .equ	PINA3	=3
          .equ	PINA2	=2
          .equ	PINA1	=1
          .equ	PINA0	=0
         
         ;PORTB
          .equ	PB7		=7
          .equ	PB6		=6
          .equ	PB5		=5
          .equ	PB4		=4
          .equ	PB3		=3
          .equ	PB2		=2
          .equ	PB1		=1
          .equ	PB0		=0
         
         ;DDRB
          .equ	DDB7	=7
          .equ	DDB6	=6
          .equ	DDB5	=5
          .equ	DDB4	=4
          .equ	DDB3	=3
          .equ	DDB2	=2
          .equ	DDB1	=1
          .equ	DDB0	=0
         
         ;PINB
          .equ	PINB7	=7
          .equ	PINB6	=6
          .equ	PINB5	=5
          .equ	PINB4	=4
          .equ	PINB3	=3
          .equ	PINB2	=2
          .equ	PINB1	=1
          .equ	PINB0	=0
         
         ;PORTC
          .equ	PC7		=7
          .equ	PC6		=6
          .equ	PC5		=5
          .equ	PC4		=4
          .equ	PC3		=3
          .equ	PC2		=2
          .equ	PC1		=1
          .equ	PC0		=0
         
         ;DDRC
          .equ	DDC7	=7
          .equ	DDC6	=6
          .equ	DDC5	=5
          .equ	DDC4	=4
          .equ	DDC3	=3
          .equ	DDC2	=2
          .equ	DDC1	=1
          .equ	DDC0	=0
         
         ;PINC
          .equ	PINC7	=7
          .equ	PINC6	=6
          .equ	PINC5	=5
          .equ	PINC4	=4
          .equ	PINC3	=3
          .equ	PINC2	=2
          .equ	PINC1	=1
          .equ	PINC0	=0
         
         ;PORTD
          .equ	PD7		=7
          .equ	PD6		=6
          .equ	PD5		=5
          .equ	PD4		=4
          .equ	PD3		=3
          .equ	PD2		=2
          .equ	PD1		=1
          .equ	PD0		=0
         
         ;DDRD
          .equ	DDD7	=7
          .equ	DDD6	=6
          .equ	DDD5	=5
          .equ	DDD4	=4
          .equ	DDD3	=3
          .equ	DDD2	=2
          .equ	DDD1	=1
          .equ	DDD0	=0
         
         ;PIND
          .equ	PIND7	=7
          .equ	PIND6	=6
          .equ	PIND5	=5
          .equ	PIND4	=4
          .equ	PIND3	=3
          .equ	PIND2	=2
          .equ	PIND1	=1
          .equ	PIND0	=0
         
         ;SPCR
          .equ	SPIE	=7
          .equ	SPE		=6
          .equ	DORD	=5
          .equ	MSTR	=4
          .equ	CPOL	=3
          .equ	CPHA	=2
          .equ	SPR1	=1
          .equ	SPR0	=0
         
         ;SPSR
          .equ	SPIF	=7
          .equ	WCOL	=6
         
         ;USR
          .equ	RXC		=7
          .equ	TXC		=6
          .equ	UDRE	=5
          .equ	FE		=4
          .equ	OR		=3
         
         ;RXCIE
          .equ	RXCIE	=7
          .equ	TXCIE	=6
          .equ	UDRIE	=5
          .equ	RXEN	=4
          .equ	TXEN	=3
          .equ	CHR9	=2
          .equ	RXB8	=1
          .equ	TXB8	=0
         
         ;ACSR
          .equ	ACD		=7
          .equ	ACO		=5
          .equ	ACI		=4
          .equ	ACIE	=3
          .equ	ACIC	=2
          .equ	ACIS1	=1
          .equ	ACIS0	=0
         
         ;ADMUX
          .equ	MUX2	=2
          .equ	MUX1	=1
          .equ	MUX0	=0
         
         ;ADCSR
          .equ	ADEN	=7
          .equ	ADSC	=6
          .equ	ADFR	=5
          .equ	ADIF	=4
          .equ	ADIE	=3
          .equ	ADPS2	=2
          .equ	ADPS1	=1
          .equ	ADPS0	=0
         
          .def	XL		=r26
          .def	XH		=r27
          .def	YL		=r28
          .def	YH		=r29
          .def	ZL		=r30
          .def	ZH		=r31
         
          .equ 	RAMEND  =$25F	;Last On-Chip SRAM location
          .equ	XRAMEND =$25F
          .equ	E2END	=$1FF
          .equ	FLASHEND=$FFF
         
          .equ	INT0addr=$001	;External Interrupt0 Vector Address
          .equ	INT1addr=$002	;External Interrupt1 Vector Address
          .equ	OC2addr =$003	;Timer2 compare match Vector Address
          .equ	OVF2addr=$004	;Timer2 overflow Vector Address
          .equ	ICP1addr=$005	;Timer1 Input Capture Vector Address
          .equ	OC1Aaddr=$006	;Timer1 Output Compare A Interrupt Vector Address
          .equ	OC1Baddr=$007	;Timer1 Output Compare B Interrupt Vector Address
          .equ	OVF1addr=$008	;Overflow1 Interrupt Vector Address
          .equ	OVF0addr=$009	;Overflow0 Interrupt Vector Address
          .equ	SPIaddr =$00A	;SPI Interrupt Vector Address
          .equ	URXCaddr=$00B	;UART Receive Complete Interrupt Vector Address
          .equ	UDREaddr=$00C	;UART Data Register Empty Interrupt Vector Address
          .equ	UTXCaddr=$00D	;UART Transmit Complete Interrupt Vector Address
          .equ	ADCCaddr=$00E	;ADC Conversion Complete Interrupt Vector Address
          .equ	ERDYaddr=$00F	;EEPROM Write Complete Interrupt Vector Address
          .equ	ACIaddr =$010	;Analog Comparator Interrupt Vector Address
         
          .def	Mes = R0
          .def	Temp1 = R16
          .def	Temp2 = R17
          .def	Temp3 = R18
          .def	TimerCount = R19
          .def	PwmStep = R20
          .def	PwmValue = R21
          .def	DispNum = R22
          .def	SegPattern = R23
          .def	tho = R24
          .def	hun = R25
          .def	ten = R26
          .def	unit = R27
         
         ;See page 64 in Atmel manual to work out all baud rates
         
          .equ	baud2400 = 207
          .equ	baud4800 = 103
          .equ	baud9600 = 51
          .equ	baud14400 = 34
         
          	.cseg
          	.org $000
         
000000 c010      Reset : rjmp	Start
         
          	.org $001
         	
000001 c0c1      	rjmp	EXT_INT0
         	
          	.org $009
         	
000009 c0a4      	rjmp	TIM0_OVF
         
          	.org $011
         	
          Start :		;initialise 
000011 e50f      		ldi Temp1,LOW(RAMEND)
000012 bf0d      		out SPL,Temp1
000013 e002      		ldi Temp1,HIGH(RAMEND)
000014 bf0e      		out SPH,Temp1
         		
         		;Set baud rate
         		;choose from constants declared above
000015 e303      		ldi 	Temp1,baud9600
000016 b909      		out	UBRR,Temp1
         		
         		;Enable the receiver and transmittor
000017 e108      		ldi 	Temp1,0b00011000
000018 b90a      		out	UCR,Temp1
         		
         		;Hopefully configure a2d
000019 e000      		ldi 	Temp1,0b00000000
00001a b907      		out	ADMUX,Temp1
00001b ee00      		ldi 	Temp1,0b11100000
00001c b906      		out	ADCSR,Temp1
         		
         		;-------------------------------------------------------------------------------
         		;Question 2 :  initialisation
         		
00001d 9ad3      		sbi 	DDRA,3
00001e 98db      		cbi 	PORTA,3
         		
         		;-------------------------------------------------------------------------------
         		;Question 4 : pushbutton specific initialisation
         		;Push button port
00001f 988a      		cbi	DDRD,DDD2
000020 9a92      		sbi	PORTD,2
         				
         		;configuring int0
000021 b705      		in 	Temp1,MCUCR
000022 6002      		sbr 	Temp1,0b00000010;falling edge
000023 bf05      		out 	MCUCR, Temp1
         	
         		;Setting interupt mask
000024 b70a      		in 	Temp1,GIFR
000025 7400      		cbr 	Temp1,0b10111111
000026 bf0a      		out	GIFR,Temp1
         	
         		;Enabling timer overfill interupts
000027 b709      		in 	Temp1,TIMSK
000028 6001      		sbr 	Temp1,0b00000001
000029 bf09      		out	TIMSK,Temp1
00002a d07b      		rcall InteruptGo
00002b 9478      		sei
         		
         		;Get Pwm square wave out of PD7	
00002c 9a8f      		sbi	DDRD,PD7
         		;Start Timer 2
00002d e601      		ldi	Temp1,0b01100001
00002e bd05      		out	TCCR2,Temp1
         		
00002f 2744      		clr	PwmStep
000030 2755      		clr	PwmValue
000031 bd53      		out	OCR2,PwmValue
         		
         		;---------------------------------------------------------------------------------
         		;Question 5
         		
         		;port C all out
000032 ef0f      		ser Temp1
000033 bb04      		out DDRC,Temp1
         		;Inputs 
         		
         		;ldi Temp1,0x00
         		;out DDRB,Temp1
         		;pullup resistors		
         		;ser Temp1
         		;out PORTB,Temp1
         		
000034 b30a      		in 	Temp1,DDRA
000035 6f00      		sbr	Temp1,0xF0
000036 bb0a      		out 	DDRA,Temp1
         		
         		;pullup resistors		
000037 b30b      		in 	Temp1,PORTA
000038 6f00      		sbr	Temp1,0xF0
000039 bb0b      		out 	PORTA,Temp1
         		
         		
         		;---------------------------------------------------------------------------------
         		
         		;---------------------------------------------------------------------------------
         		;Question 6		
         		
00003a 9ad2      		sbi	DDRA,DDA2
00003b 9ada      		sbi	PORTA,2
         		
         		
         		;---------------------------------------------------------------------------------
         		
         		
         		;Sits here until char is received
         			
00003c d0a7      Waitchar: 	rcall	Update
00003d 9b5f      		sbis	USR,RXC
00003e cffd      		rjmp	Waitchar
         		;Load char in Temp reg & compare it to special char
00003f b10c      		in	Temp1,UDR
         		;Special char represented by decimal number in cpi statement
000040 2f10      		mov	Temp2,Temp1
         		
         		;specialchar
000041 3705      		cpi	Temp1,117
000042 f0e1      		breq	SpecChar
         		
         		;V
         		
000043 3506      		cpi	Temp1,86
000044 f111      		breq	pondernavel
         		
         		;R
         		
000045 3502      		cpi	Temp1,82
000046 f0a1      		breq	OhmMeter
         		
         		;breq is not get capable of doing jumps
         		;B
000047 3402      		cpi	Temp1,66
000048 f019      		breq	Beep
         		
000049 d0bb      		rcall	Waitclear
00004a d0be      Common:		rcall	LineFeed		
00004b cff0      Universal:	rjmp	Waitchar
         
         		;-------------------------------------------------------------------------------
         		;Question 6
         		
         		;using unit in loop because variable are sparse
00004c d05d      Beep:		rcall	InteruptStop
00004d e0b3      		ldi	unit,3
         		;using 1 microsec delay, there 250 * 4 should work
         		;VIP there is no off by one if you want for use 4, not 3
00004e ec38      BeepLoop:	ldi	TimerCount,200
00004f 9ada      InnerBeep:	sbi	PORTA,2
000050 d0aa      		rcall	Delay
000051 98da      		cbi	PORTA,2
000052 d0a8      		rcall	Delay
         		
000053 953a      		dec	TimerCount
000054 3030      		cpi	TimerCount,0
000055 f7c9      		brne	InnerBeep
         		
000056 95ba      		dec	unit
000057 30b0      		cpi	unit,0
000058 f7a9      		brne	BeepLoop
         		
000059 d04c      		rcall	InteruptGo
00005a cff0      		rjmp	Universal
         		
         		;-------------------------------------------------------------------------------
         		;Question 2 : Ohm meter : Rest at end of code
         		
00005b d0b6      OhmMeter:	rcall	OhmBeg
00005c d0bc      		rcall	OhmCheck
00005d d0d5      		rcall	OhmEnd
00005e cfeb      		rjmp	Common	
         
         		;-------------------------------------------------------------------------------
         		;First question
         
00005f 2f10      SpecChar:	mov	Temp2,Temp1
000060 e205      		ldi	Temp1,37
000061 d0a3      		rcall	Waitclear
000062 2f01      		mov	Temp1,Temp2
000063 d0a1      		rcall	Waitclear
000064 e205      		ldi	Temp1,37
000065 d09f      		rcall	Waitclear
000066 cfe3      		rjmp	Common
         		
         		;-------------------------------------------------------------------------------
         		;Third question : Voltometer
         
000067 9b34      pondernavel: 	sbis	ADCSR,ADIF
000068 cffe      		rjmp	pondernavel	
000069 d001      		rcall	carpe
00006a cfdf      		rjmp	Common
         		
00006b 9834      carpe:		cbi	ADCSR,ADIF
00006c b104      		in	Temp1,ADCL
00006d b115      		in	Temp2,ADCH
00006e d003      		rcall	FourTimes
00006f d014      		rcall 	Convert
000070 d006      		rcall 	OutLoop
000071 9508      		ret
         
000072 0f00      FourTimes:	lsl	Temp1
000073 1f11      		rol	Temp2
000074 0f00      		lsl	Temp1
000075 1f11      		rol	Temp2
000076 9508      		ret
         
000077 2f08      OutLoop:	mov	Temp1,Tho
000078 5d00      		subi	Temp1,-48
000079 d08b      		rcall	Waitclear
00007a 2f09      		mov	Temp1,hun
00007b 5d00      		subi	Temp1,-48
00007c d088      		rcall	Waitclear
00007d 2f0a      		mov	Temp1,ten
00007e 5d00      		subi	Temp1,-48
00007f d085      		rcall	Waitclear
000080 2f0b      		mov	Temp1,unit
000081 5d00      		subi	Temp1,-48
000082 d082      		rcall	Waitclear
000083 9508      		ret	
         
         
000084 930f      Convert:	push	Temp1
000085 931f      		push	Temp2
000086 932f      		push	Temp3
         		
000087 2788      		clr	tho
000088 2799      		clr	hun
000089 27aa      		clr	ten
00008a 27bb      		clr	unit
         
00008b 5e08      DoThou:		subi	Temp1,LOW(1000)
00008c 4013      		sbci	Temp2,HIGH(1000)
00008d f010      		brcs	NowHun
00008e 9583      		inc	tho
00008f cffb      		rjmp	DoThou
         		
000090 ee28      NowHun:		ldi	Temp3,LOW(1000)
000091 0f02      		add	Temp1,Temp3
000092 e023      		ldi	Temp3,HIGH(1000)
000093 1f12      		adc	Temp2,Temp3
         		
         
000094 5604      DoHun:		subi	Temp1,100
000095 4010      		sbci	Temp2,0
000096 f010      		brcs	NowTen
000097 9593      		inc	hun
000098 cffb      		rjmp	DoHun
         		
000099 e624      NowTen:		ldi	Temp3,100
00009a 0f02      		add	Temp1,Temp3
         		
00009b 500a      DoTen:		subi	Temp1,10
00009c f010      		brcs	NowUnit
00009d 95a3      		inc	ten
00009e cffc      		rjmp	DoTen
         		
00009f e02a      NowUnit:	ldi	Temp3,10
0000a0 0f02      		add	Temp1,Temp3
0000a1 2fb0      		mov	unit, Temp1
         		
0000a2 910f      		pop	Temp1
0000a3 911f      		pop	Temp2
0000a4 912f      		pop	Temp3
         		
0000a5 9508      		ret
         		
         		;-------------------------------------------------------------------------------
         		
         		;Question 4
         		
         		;-------------------------------------------------------------------------------
         		
0000a6 b70b      InteruptGo : 		in	Temp1,GIMSK
0000a7 6400      			sbr 	Temp1,0b01000000
0000a8 bf0b      			out 	GIMSK,Temp1
0000a9 9508      			ret
         
0000aa b70b      InteruptStop : 		in	Temp1,GIMSK
0000ab 7b0f      			cbr 	Temp1,0b01000000
0000ac bf0b      			out 	GIMSK,Temp1
0000ad 9508      			ret
         
0000ae 930f      TIM0_OVF :		push	Temp1
0000af b70f      			in	Temp1,SREG
0000b0 930f      			push	Temp1
0000b1 931f      			push	Temp2
         			
0000b2 953a      			dec 	TimerCount
         			;compare
0000b3 3030      			cpi 	TimerCount,0
         			;If not equal jump else clear
0000b4 f421      			brne 	CarryOn	
0000b5 dff0      			rcall	InteruptGo
         			;Stop timer
0000b6 b703      			in 	Temp1,TCCR0
0000b7 7f0e      			cbr 	Temp1,0b00000001
0000b8 bf03      			out	TCCR0,Temp1
         	
0000b9 911f      CarryOn :		pop	Temp2
0000ba 910f      			pop	Temp1
0000bb bf0f      			out	SREG,Temp1
0000bc 910f      			pop	Temp1
0000bd 9518      			reti
         
         
         ;press button interrupt
         
0000be 2744      ZeroPwm:		clr	PwmStep
0000bf 2755      			clr	PwmValue
0000c0 c01b      			rjmp	PostCheck
         	
0000c1 ef5f      KnockUp:		ser	PwmValue
0000c2 c019      			rjmp	PostCheck
         	
0000c3 930f      EXT_INT0:		push	Temp1
0000c4 b70f      			in	Temp1,SREG
0000c5 930f      			push	Temp1
0000c6 931f      			push	Temp2
         					
         			;ignore button
0000c7 dfe2      			rcall	InteruptStop
         			
0000c8 b703      			in 	Temp1,TCCR0;clk/64 takes 8us to inc 1 us
0000c9 6003      			sbr 	Temp1,0b0000011
0000ca bf03      			out	TCCR0,Temp1
         			
0000cb b702      			in 	Temp1,TCNT0
0000cc 6000      			sbr 	Temp1,0x00
0000cd bf02      			out	TCNT0,Temp1
         			
         			;Change duty cycle
         			
0000ce 2733      			clr	TimerCount
0000cf b715      			in 	Temp2,MCUCR
0000d0 b705      			in 	Temp1,MCUCR
         			
         			;If skips one, skips both	
         			;using edgew detection just toggle last bit to change detection
0000d1 fd00      			sbrc	Temp1,0
0000d2 7f1e      			cbr 	Temp2,0b00000001;falling edge
0000d3 fd00      			sbrc	Temp1,0
0000d4 f441      			brne	Skip
0000d5 6011      			sbr 	Temp2,0b00000001;rising edge
         	
0000d6 9543      			inc	PwmStep
0000d7 5d5c      			subi	PwmValue,-36
0000d8 3047      			cpi	PwmStep,7
0000d9 f339      			breq	KnockUp
0000da 3048      			cpi	PwmStep,8
0000db f311      			breq	ZeroPwm
         	
0000dc bd53      PostCheck:		out	OCR2,PwmValue
         					
0000dd e33c      Skip:			ldi	TimerCount,60
0000de bf15      			out 	MCUCR, Temp2
         			
0000df 911f      			pop	Temp2
0000e0 910f      			pop	Temp1
0000e1 bf0f      			out	SREG,Temp1
0000e2 910f      			pop	Temp1
0000e3 9518      			reti
         
         		;-------------------------------------------------------------------------------
         		;Question 5
         		
0000e4 2766      Update:		clr DispNum
0000e5 9bcc      		sbis	PINA,4
0000e6 5f6f      		subi	DispNum,-1
0000e7 9bcd      		sbis	PINA,5
0000e8 5f6e      		subi	DispNum,-2
0000e9 9bce      		sbis	PINA,6
0000ea 5f6c      		subi	DispNum,-4
0000eb 9bcf      		sbis	PINA,7
0000ec 5f68      		subi	DispNum,-8
0000ed 306a      		cpi	DispNum,10
0000ee f008      		brlo	Disp
0000ef e06a      		ldi	DispNum,10	
         			
0000f0 e7e6      Disp:		ldi ZL,LOW(Sevensegtbl*2)
0000f1 e0f2      		ldi ZH,HIGH(Sevensegtbl*2)
         		
0000f2 936f      		push DispNum
0000f3 0f66      		lsl DispNum
0000f4 0fe6      		add ZL, DispNum
0000f5 916f      		pop DispNum
         		
0000f6 2700      		clr Temp1
0000f7 1ff0      		adc ZH,Temp1
         		
0000f8 95c8      		lpm
         		
0000f9 ba05      		out PORTC, R0
         
0000fa 9508      		ret
         		
         		
         
         ;1 micro second on the noggin
0000fb e40c      Delay : ldi Temp1,76
0000fc e111      Del1: 	ldi Temp2,17
0000fd e021      Del2: 	ldi Temp3,1 ; delay
0000fe 952a      Del3: 	dec Temp3
0000ff f7f1      	brne Del3
000100 951a      	dec Temp2
000101 f7d9      	brne Del2
000102 950a      	dec Temp1
000103 f7c1      	brne Del1
000104 9508      	ret
         
         		;-------------------------------------------------------------------------------
         		
         
000105 9b5d      Waitclear:	sbis	USR,UDRE
000106 cffe      		rjmp	Waitclear
000107 b90c      		out	UDR,Temp1
000108 9508      		ret
         
000109 9b5d      LineFeed:	sbis	USR,UDRE
00010a cffe      		rjmp	LineFeed
00010b e00d      		ldi	Temp1,$0D
00010c b90c      		out	UDR,Temp1
         		
00010d 9b5d      Carriage:	sbis	USR,UDRE
00010e cffe      		rjmp	Carriage
00010f e00a      		ldi	Temp1,$0A
000110 b90c      		out	UDR,Temp1
000111 9508      		ret
         
         		;-------------------------------------------------------------------------------
         		
         		;Question 2
         
          OhmBeg:	;Start counter
         	;ldi	Temp1,0b00000011
000112 e005      	ldi	Temp1,0b00000101
000113 bd0e      	out	TCCR1B,Temp1
         	;Zero value
000114 e000      	ldi	Temp1,0
000115 bd0d      	out	TCNT1H,Temp1
000116 bd0c      	out	TCNT1L,Temp1	
         	
         	;Enable capture
         	;cbi	ACSR,0
         	;sbi	ACSR,2
         	
         	;set input & begin to charge capacitor
000117 98d3      	cbi 	DDRA,3
         	
000118 9508      	ret
         
000119 9b45      OhmCheck:	sbis	ACSR,ACO
00011a cffe      		rjmp	OhmCheck
         		
         		
         		;in	Temp1,ICR1L
         		;in	Temp2,ICR1H
         		
00011b b50c      		in	Temp1,TCNT1L
00011c b51d      		in	Temp2,TCNT1H
         		
00011d 2f20      		mov 	Temp3, Temp1
00011e 702f      		andi 	Temp3, 0b00001111
         		
         		;Very rough solution for clock/1024
         		;divide by 8
         		
00011f 9516      		lsr	Temp2
000120 9507      		ror	Temp1	
000121 9516      		lsr	Temp2
000122 9507      		ror	Temp1	
000123 9516      		lsr	Temp2
000124 9507      		ror	Temp1	
         				
000125 df5e      		rcall 	Convert
000126 df50      		rcall 	OutLoop
         		
000127 e20e      		ldi	Temp1,'.'
000128 dfdc      		rcall	Waitclear
         		
         		;Send rough decimal value
000129 e0f2      		ldi ZH, HIGH(Decimaltbl * 2)
00012a e8ec      		ldi ZL, LOW(Decimaltbl * 2)
         		
00012b 0fe2      		add ZL, Temp3	
00012c 2722      		clr Temp3
00012d 1ff2      		adc ZH, Temp3	
         		
00012e 95c8      		lpm
00012f 2d00      		mov Temp1, Mes
         		
000130 dfd4      		rcall	Waitclear
         					
000131 9845      		cbi	ACSR,ACO
000132 9508      		ret
         
          OhmEnd:	;go high & charge resistor
         	
000133 e000      	ldi	Temp1,0xb00
000134 bd0e      	out	TCCR1B,Temp1
         		
000135 e000      	ldi	Temp1,0
000136 bd0d      	out	TCNT1H,Temp1
000137 bd0c      	out	TCNT1L,Temp1
         	
         	;Dischare capacitor
000138 9ad3      	sbi 	DDRA,3
000139 98db      	cbi 	PORTA, 3
         	
         	;Disable comparator
         	;sbi	ACSR,0
         	
00013a 9508      	ret
         
         ;Table for Question 5		
          Sevensegtbl:
          	.dw $7E
00013b 007e
          	.dw $30
00013c 0030
          	.dw $6D
00013d 006d
          	.dw $79
00013e 0079
          	.dw $33
00013f 0033
          	.dw $5B
000140 005b
          	.dw $5F
000141 005f
          	.dw $70
000142 0070
          	.dw $7F
000143 007f
          	.dw $73
000144 0073
          	.dw $4F		
000145 004f
         
          Decimaltbl:
          	.db "0011233455667889"
000146 3030
000147 3131
000148 3332
000149 3433
00014a 3535
00014b 3636
00014c 3837
00014d 3938
          	.exit			

Assembly complete with no errors.
