
AVRASM ver. 1.54  J:\code\crap.asm Mon May 09 01:35:22 2005


         ;Presscnt3 using interrupts to decrement coounter
         
          .include "8535def.inc"
         ;***************************************************************************
         ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
         ;* 
         ;* Number				:AVR000
         ;* File Name			:"8535def.inc"
         ;* Title				:Register/Bit Definitions for the AT90S8535
         ;* Date                 :99.01.28
         ;* Version              :1.30
         ;* Support telephone	:+47 72 88 43 88 (ATMEL Norway)
         ;* Support fax			:+47 72 88 43 99 (ATMEL Norway)
         ;* Support E-mail		:avr@atmel.com
         ;* Target MCU			:AT90S8535
         ;*
         ;* DESCRIPTION
         ;* When including this file in the assembly program file, all I/O register	
         ;* names and I/O register bit names appearing in the data book can be used.
         ;* In addition, the six registers forming the three data pointers X, Y and
         ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
         ;* SRAM is also defined 
         ;*
         ;* The Register names are represented by their hexadecimal address.
         ;* 
         ;* The Register Bit names are represented by their bit number (0-7).
         ;* 
         ;* Please observe the difference in using the bit names with instructions
         ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc" 
         ;* (skip if bit in register set/cleared). The following example illustrates
         ;* this:
         ;* 
         ;* in	r16,PORTB				;read PORTB latch
         ;* sbr	r16,(1<<PB6)+(1<<PB5)	;set PB6 and PB5 (use masks, not bit#)
         ;* out  PORTB,r16				;output to PORTB
         ;*
         ;* in	r16,TIFR				;read the Timer Interrupt Flag Register
         ;* sbrc	r16,TOV0				;test the overflow flag (use bit#)
         ;* rjmp	TOV0_is_set				;jump if set
         ;* ...							;otherwise do something else
         ;***************************************************************************
         
         ;***** Specify Device
          .device AT90S8535
         
         ;***** I/O Register Definitions
          .equ	SREG	=$3f
          .equ	SPH		=$3e
          .equ	SPL		=$3d
          .equ	GIMSK	=$3b
          .equ	GIFR	=$3a
          .equ	TIMSK	=$39
          .equ	TIFR	=$38
          .equ	MCUCR	=$35
          .equ	MCUSR	=$34
          .equ	TCCR0	=$33
          .equ	TCNT0	=$32
          .equ	TCCR1A	=$2f
          .equ	TCCR1B	=$2e
          .equ	TCNT1H	=$2d
          .equ	TCNT1L	=$2c
          .equ	OCR1AH	=$2b
          .equ	OCR1AL	=$2a
          .equ	OCR1BH	=$29
          .equ	OCR1BL	=$28
          .equ	ICR1H	=$27
          .equ	ICR1L	=$26
          .equ	TCCR2	=$25
          .equ	TCNT2	=$24
          .equ	OCR2	=$23
          .equ	ASSR	=$22
          .equ	WDTCR	=$21
          .equ	EEARH	=$1f
          .equ	EEARL	=$1e
          .equ	EEDR	=$1d
          .equ	EECR	=$1c
          .equ	PORTA	=$1b
          .equ	DDRA	=$1a
          .equ	PINA	=$19
          .equ	PORTB	=$18
          .equ	DDRB	=$17
          .equ	PINB	=$16
          .equ	PORTC	=$15
          .equ	DDRC	=$14
          .equ	PINC	=$13
          .equ	PORTD	=$12
          .equ	DDRD	=$11
          .equ	PIND	=$10
          .equ	SPDR	=$0f
          .equ	SPSR	=$0e
          .equ	SPCR	=$0d
          .equ	UDR		=$0c
          .equ	USR		=$0b
          .equ	UCR		=$0a
          .equ	UBRR	=$09
          .equ	ACSR	=$08
          .equ    ADMUX   =$07
          .equ    ADCSR   =$06
          .equ    ADCH    =$05
          .equ    ADCL    =$04
         
         
         ;***** Bit Definitions
         ;MCUSR
          .equ	EXTRF	=1
          .equ	PORF	=0
         
         ;GIMSK
          .equ	INT1	=7
          .equ	INT0	=6
         
         ;GIFR
          .equ	INTF1	=7
          .equ	INTF0	=6
         
         ;TIMSK
          .equ	OCIE2	=7
          .equ	TOIE2	=6
          .equ	TICIE1	=5
          .equ	OCIE1A	=4
          .equ	OCIE1B	=3
          .equ	TOIE1	=2
          .equ	TOIE0	=0
         
         ;TIFR
          .equ	OCF2	=7
          .equ	TOV2	=6
          .equ	ICF1	=5
          .equ	OCF1A	=4
          .equ	OCF1B	=3
          .equ	TOV1	=2
          .equ	TOV0	=0
         
         ;MCUCR
          .equ	SE		=6
          .equ	SM1		=5
          .equ	SM0		=4
          .equ	ISC11	=3
          .equ	ISC10	=2
          .equ	ISC01	=1
          .equ	ISC00	=0
         
         ;TCCR0
          .equ	CS02	=2
          .equ	CS01	=1
          .equ	CS00	=0
         
         ;TCCR1A
          .equ	COM1A1	=7
          .equ	COM1A0	=6
          .equ	COM1B1	=5
          .equ	COM1B0	=4
          .equ	PWM11	=1
          .equ	PWM10	=0
         
         ;TCCR1B
          .equ	ICNC1	=7
          .equ	ICES1	=6
          .equ	CTC1	=3
          .equ	CS12	=2
          .equ	CS11	=1
          .equ	CS10	=0
         
         ;TCCR2
          .equ	PWM2	=6
          .equ	COM21	=5
          .equ	COM20	=4
          .equ	CTC2	=3
          .equ	CS22	=2
          .equ	CS21	=1
          .equ	CS20	=0
         
         ;ASSR
          .equ	AS2		=3
          .equ	TCN2UB	=2
          .equ	OCR2UB	=1
          .equ	TCR2UB	=0
         
         ;WDTCR
          .equ	WDTOE	=4
          .equ	WDE		=3
          .equ	WDP2	=2
          .equ	WDP1	=1
          .equ	WDP0	=0
         
         ;EECR
          .equ	EERIE	=3
          .equ	EEMWE	=2
          .equ	EEWE	=1
          .equ	EERE	=0
         
         ;PORTA
          .equ	PA7		=7
          .equ	PA6		=6
          .equ	PA5		=5
          .equ	PA4		=4
          .equ	PA3		=3
          .equ	PA2		=2
          .equ	PA1		=1
          .equ	PA0		=0
         
         ;DDRA
          .equ	DDA7	=7
          .equ	DDA6	=6
          .equ	DDA5	=5
          .equ	DDA4	=4
          .equ	DDA3	=3
          .equ	DDA2	=2
          .equ	DDA1	=1
          .equ	DDA0	=0
         
         ;PINA
          .equ	PINA7	=7
          .equ	PINA6	=6
          .equ	PINA5	=5
          .equ	PINA4	=4
          .equ	PINA3	=3
          .equ	PINA2	=2
          .equ	PINA1	=1
          .equ	PINA0	=0
         
         ;PORTB
          .equ	PB7		=7
          .equ	PB6		=6
          .equ	PB5		=5
          .equ	PB4		=4
          .equ	PB3		=3
          .equ	PB2		=2
          .equ	PB1		=1
          .equ	PB0		=0
         
         ;DDRB
          .equ	DDB7	=7
          .equ	DDB6	=6
          .equ	DDB5	=5
          .equ	DDB4	=4
          .equ	DDB3	=3
          .equ	DDB2	=2
          .equ	DDB1	=1
          .equ	DDB0	=0
         
         ;PINB
          .equ	PINB7	=7
          .equ	PINB6	=6
          .equ	PINB5	=5
          .equ	PINB4	=4
          .equ	PINB3	=3
          .equ	PINB2	=2
          .equ	PINB1	=1
          .equ	PINB0	=0
         
         ;PORTC
          .equ	PC7		=7
          .equ	PC6		=6
          .equ	PC5		=5
          .equ	PC4		=4
          .equ	PC3		=3
          .equ	PC2		=2
          .equ	PC1		=1
          .equ	PC0		=0
         
         ;DDRC
          .equ	DDC7	=7
          .equ	DDC6	=6
          .equ	DDC5	=5
          .equ	DDC4	=4
          .equ	DDC3	=3
          .equ	DDC2	=2
          .equ	DDC1	=1
          .equ	DDC0	=0
         
         ;PINC
          .equ	PINC7	=7
          .equ	PINC6	=6
          .equ	PINC5	=5
          .equ	PINC4	=4
          .equ	PINC3	=3
          .equ	PINC2	=2
          .equ	PINC1	=1
          .equ	PINC0	=0
         
         ;PORTD
          .equ	PD7		=7
          .equ	PD6		=6
          .equ	PD5		=5
          .equ	PD4		=4
          .equ	PD3		=3
          .equ	PD2		=2
          .equ	PD1		=1
          .equ	PD0		=0
         
         ;DDRD
          .equ	DDD7	=7
          .equ	DDD6	=6
          .equ	DDD5	=5
          .equ	DDD4	=4
          .equ	DDD3	=3
          .equ	DDD2	=2
          .equ	DDD1	=1
          .equ	DDD0	=0
         
         ;PIND
          .equ	PIND7	=7
          .equ	PIND6	=6
          .equ	PIND5	=5
          .equ	PIND4	=4
          .equ	PIND3	=3
          .equ	PIND2	=2
          .equ	PIND1	=1
          .equ	PIND0	=0
         
         ;SPCR
          .equ	SPIE	=7
          .equ	SPE		=6
          .equ	DORD	=5
          .equ	MSTR	=4
          .equ	CPOL	=3
          .equ	CPHA	=2
          .equ	SPR1	=1
          .equ	SPR0	=0
         
         ;SPSR
          .equ	SPIF	=7
          .equ	WCOL	=6
         
         ;USR
          .equ	RXC		=7
          .equ	TXC		=6
          .equ	UDRE	=5
          .equ	FE		=4
          .equ	OR		=3
         
         ;RXCIE
          .equ	RXCIE	=7
          .equ	TXCIE	=6
          .equ	UDRIE	=5
          .equ	RXEN	=4
          .equ	TXEN	=3
          .equ	CHR9	=2
          .equ	RXB8	=1
          .equ	TXB8	=0
         
         ;ACSR
          .equ	ACD		=7
          .equ	ACO		=5
          .equ	ACI		=4
          .equ	ACIE	=3
          .equ	ACIC	=2
          .equ	ACIS1	=1
          .equ	ACIS0	=0
         
         ;ADMUX
          .equ	MUX2	=2
          .equ	MUX1	=1
          .equ	MUX0	=0
         
         ;ADCSR
          .equ	ADEN	=7
          .equ	ADSC	=6
          .equ	ADFR	=5
          .equ	ADIF	=4
          .equ	ADIE	=3
          .equ	ADPS2	=2
          .equ	ADPS1	=1
          .equ	ADPS0	=0
         
          .def	XL		=r26
          .def	XH		=r27
          .def	YL		=r28
          .def	YH		=r29
          .def	ZL		=r30
          .def	ZH		=r31
         
          .equ 	RAMEND  =$25F	;Last On-Chip SRAM location
          .equ	XRAMEND =$25F
          .equ	E2END	=$1FF
          .equ	FLASHEND=$FFF
         
          .equ	INT0addr=$001	;External Interrupt0 Vector Address
          .equ	INT1addr=$002	;External Interrupt1 Vector Address
          .equ	OC2addr =$003	;Timer2 compare match Vector Address
          .equ	OVF2addr=$004	;Timer2 overflow Vector Address
          .equ	ICP1addr=$005	;Timer1 Input Capture Vector Address
          .equ	OC1Aaddr=$006	;Timer1 Output Compare A Interrupt Vector Address
          .equ	OC1Baddr=$007	;Timer1 Output Compare B Interrupt Vector Address
          .equ	OVF1addr=$008	;Overflow1 Interrupt Vector Address
          .equ	OVF0addr=$009	;Overflow0 Interrupt Vector Address
          .equ	SPIaddr =$00A	;SPI Interrupt Vector Address
          .equ	URXCaddr=$00B	;UART Receive Complete Interrupt Vector Address
          .equ	UDREaddr=$00C	;UART Data Register Empty Interrupt Vector Address
          .equ	UTXCaddr=$00D	;UART Transmit Complete Interrupt Vector Address
          .equ	ADCCaddr=$00E	;ADC Conversion Complete Interrupt Vector Address
          .equ	ERDYaddr=$00F	;EEPROM Write Complete Interrupt Vector Address
          .equ	ACIaddr =$010	;Analog Comparator Interrupt Vector Address
         
          
         
         ;delay vars
         
          .def SegPattern = R0
         
          .def tmp1 = R21
         
          .def tmp2 = R20
         
          .def tmp3 = R19
         
          
         
          .def Tmp1 = R16
         
          .def Tmp2 = R17
         
          .def count = R18
         
          .def CountPress = R22
         
          .def timCount =R23
         
          .def timCount1 =R24
         
          .cseg
         
          .org $000
         
          
         
000000 c010      Reset:   rjmp Start          
         
                     
         
                      .org $001
         
000001 c033                  rjmp EXT_INT0 ;external interrupt 0 handler
         
                     
         
                      .org $009
         
000009 c042                  rjmp TIM0_OVF ;timer 0 overflow interrupt handler
         
                     
         
                     ;.org $00E
         
                     ;rjmp A2D ;hanle an a2d interrupt
         
                     
         
                      .org $011
         
                     
         
000011 e50f      Start:    ldi Tmp1, LOW(RAMEND)
         
000012 bf0d                  out SPL, Tmp1
         
000013 e002                  ldi Tmp1, HIGH(RAMEND)
         
000014 bf0e                  out SPH, Tmp1 ;set stack pointer to point at end of ram
         
          
         
000015 9ab8                  sbi DDRB, 0 ;set output portb pin0
         
                     
         
000016 ef0f                  ser Tmp1 ;configure portc bits 0 to 7 as outputs
         
000017 bb04                  out DDRC, Tmp1            
         
000018 edee                  ldi ZL,LOW(Sevensegtbl*2) ;point z register at first entry of table
         
000019 e0f0                  ldi ZH,HIGH(Sevensegtbl*2)
         
00001a 95c8                  lpm ;get first entry into r0
         
00001b ba05                  out PORTC, SegPattern ;write to display
         
00001c 2700                  clr Tmp1
         
                     
         
00001d e069                  ldi CountPress, 9 ;set counter
         
                     
         
         ;configure INT0 -portd line bit2 to be input with pullup 
         
         ;resistor enabled and interrupt on a falling edge
         
                     
         
00001e 988a                  cbi DDRD, 2 ;portd bit2 input
         
00001f 9a92                  sbi PORTD,2 ;turn on pullup resitor
         
000020 b705                  in  Tmp1, MCUCR
         
000021 6002                  sbr Tmp1, 0b00000010 ;interrupt on falling edge
         
000022 bf05                  out MCUCR, Tmp1 
         
                     
         
         ;now enable the int0 and timer0 interrupts
         
                     
         
000023 b70b                  in  Tmp1, GIMSK
         
000024 6400                  sbr Tmp1, 0b01000000
         
000025 bf0b                  out GIMSK, Tmp1 ; enable into interrupt
         
000026 b709                  in  Tmp1, TIMSK
         
000027 6001                  sbr Tmp1, 0b00000001
         
000028 bf09                  out TIMSK, Tmp1 ;enable timer 0 interrupt
         
          
         
         ;now globally enable interrupts
         
                     
         
000029 9478                  sei
         
                     
         
         ;now nothing. let interrups handle the action
         
                     
         
00002a 9ac0      MAIN:   sbi PORTB, 0                
         
00002b ec28      Loop:    ldi count, 200
         
00002c d038                  rcall MsDelay
         
00002d 952a                  dec count
         
00002e f7e1                  brne Loop
         
00002f 98c0                  cbi PORTB, 0
         
000030 ec28      Loop1:  ldi count, 200
         
000031 d033                  rcall MsDelay
         
000032 952a                  dec count
         
000033 f7e1                  brne Loop1        
         
000034 cff5                  rjmp MAIN
         
          
         
         ;interrupt handlers:
         
          
         
         ;press button interrupt handler
         
          EXT_INT0:
         
000035 930f                  push Tmp1
         
000036 b70f                  in Tmp1, SREG
         
000037 930f                  push Tmp1
         
000038 931f                  push Tmp2
         
         ;handle:
         
                     ;disable int 0
         
000039 b70b                  in  Tmp1, GIMSK
         
00003a 6000                  sbr Tmp1, 0b00000000
         
00003b bf0b                  out GIMSK, Tmp1 ; disable int0 interrupt
         
                     
         
                     ;raise start of delay flag
         
                     ;in  Tmp1, TIFR
         
                     ;sbr Tmp1, 0b00000001
         
                     ;out TIFR, Tmp1 ;enable timer 0 interrupt
         
                     
         
                     ;was interrupt falling edge
         
00003c 9b92                  sbis PORTD,2 ;dont update display if portd bit2 is set = not falling edge
         
00003d d019                  rcall Decrement;update display
         
                     
         
                     ;toggle falling edge detection bit
         
00003e 9a92                  sbi PORTD,2 ;turn on pullup resitor
         
          
         
                     ;set presacaler -> clock source 8mhz/1024 
         
00003f b703                  in  Tmp1, TCCR0
         
000040 6001                  sbr Tmp1, 0b00000001
         
000041 bf03                  out TCCR0, Tmp1 ;enable timer 0 interrupt
         
                     
         
                     ;initialise counter and timer
         
000042 e070                  ldi timCount, 0;setup timer interrupt counter
         
000043 e080                  ldi timCount1, 0;setup timer interrupt counter
         
                     ;starting clock timer
         
000044 b702                  in  Tmp1, TCNT0
         
000045 6000                  sbr Tmp1, 0b00000000 ;starts counting from 0
         
000046 bf02                  out TCNT0, Tmp1 ;enable timer 0 interrupt
         
          
         
000047 911f                  pop Tmp2
         
000048 910f                  pop Tmp1
         
000049 bf0f                  out SREG, Tmp1
         
00004a 910f                  pop Tmp1
         
00004b 9518                  reti
         
          
         
         ;timero overflow interrupt handler
         
          TIM0_OVF:
         
00004c 930f                  push Tmp1
         
00004d b70f                  in Tmp1, SREG
         
00004e 930f                  push Tmp1
         
                     
         
                     ;stop counter/timer irritating bastard thingy
         
00004f b703                  in  Tmp1, TCCR0
         
000050 6000                  sbr Tmp1, 0b00000000
         
000051 bf03                  out TCCR0, Tmp1 ;enable timer 0 interrupt
         
                     
         
                     ;counting interrupts        
         
000052 3c78                  cpi timCount, 200
         
000053 f409                  brne Cont
         
000054 9573                  inc timCount
         
         
000055 3c88      Cont:    cpi timCount1, 200         
         
          ;           brne Cont1
         
         ;            inc timCount1
         
          ;           pop Tmp1
         
           ;          out SREG, Tmp1
         
            ;         pop Tmp1
         
000056 9518                  reti
         
                     
         
          
         
          
         
         ;other code
         
          Decrement:
         
000057 956a                  dec CountPress ;bump up count
         
000058 f409                  brne Update ;check if should rollover
         
000059 e069                  ldi CountPress, 9 ;set to nine
         
                     
         
00005a 936f      Update: push CountPress ;write new number to display-> save countpress (push) before doubling
         
00005b 0f66                  lsl CountPress ;program memory is arranged as words
         
00005c 0fe6                  add ZL, CountPress ; first adjust pointer into lookup table
         
00005d 916f                  pop CountPress ;restore
         
00005e 2700                  clr tmp1
         
00005f 1ff0                  adc ZH, tmp1
         
000060 95c8                  lpm
         
000061 ba05                  out PORTC, SegPattern
         
          
         
000062 edee                  ldi ZL,LOW(Sevensegtbl*2) ;point z register at first entry of table
         
000063 e0f0                  ldi ZH,HIGH(Sevensegtbl*2)
         
          
         
000064 9508                  ret
         
          
         
         ;1 millisecond delay loop
         
          MsDelay:
         
000065 e506                  ldi tmp1,86 ;Tmp1 
         
000066 e01a       Del1:    ldi tmp2,10 ;Tmp2 
         
000067 e032       Del2:  ldi tmp3,2 ;Tmp3 
         
000068 953a       Del3:  dec tmp3
         
000069 f7f1                  brne Del3
         
00006a 951a                  dec tmp2
         
00006b f7d9                  brne Del2
         
00006c 950a                  dec tmp1
         
00006d f7c1                  brne Del1
         
00006e 9508                  ret
         
          
         
         ;look up table for 9...0
         
          Sevensegtbl:
         
                      .dw $30
00006f 0030
         
                      .dw $6D
000070 006d
         
                      .dw $79
000071 0079
         
                      .dw $33
000072 0033
         
                      .dw $5B
000073 005b
         
                      .dw $5F
000074 005f
         
                      .dw $70
000075 0070
         
                      .dw $7F
000076 007f
         
                      .dw $73
000077 0073
         
                      .dw $7E
000078 007e

Assembly complete with no errors.
