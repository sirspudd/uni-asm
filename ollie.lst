
AVRASM ver. 1.54  J:\code\ollie.asm Mon May 09 11:09:08 2005


         ;Program which increments a counter, debouncing a switch using
         ;timing loop interrupts
         ;Oliver King
         
          	.include "8535def.inc"
         ;***************************************************************************
         ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
         ;* 
         ;* Number				:AVR000
         ;* File Name			:"8535def.inc"
         ;* Title				:Register/Bit Definitions for the AT90S8535
         ;* Date                 :99.01.28
         ;* Version              :1.30
         ;* Support telephone	:+47 72 88 43 88 (ATMEL Norway)
         ;* Support fax			:+47 72 88 43 99 (ATMEL Norway)
         ;* Support E-mail		:avr@atmel.com
         ;* Target MCU			:AT90S8535
         ;*
         ;* DESCRIPTION
         ;* When including this file in the assembly program file, all I/O register	
         ;* names and I/O register bit names appearing in the data book can be used.
         ;* In addition, the six registers forming the three data pointers X, Y and
         ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
         ;* SRAM is also defined 
         ;*
         ;* The Register names are represented by their hexadecimal address.
         ;* 
         ;* The Register Bit names are represented by their bit number (0-7).
         ;* 
         ;* Please observe the difference in using the bit names with instructions
         ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc" 
         ;* (skip if bit in register set/cleared). The following example illustrates
         ;* this:
         ;* 
         ;* in	r16,PORTB				;read PORTB latch
         ;* sbr	r16,(1<<PB6)+(1<<PB5)	;set PB6 and PB5 (use masks, not bit#)
         ;* out  PORTB,r16				;output to PORTB
         ;*
         ;* in	r16,TIFR				;read the Timer Interrupt Flag Register
         ;* sbrc	r16,TOV0				;test the overflow flag (use bit#)
         ;* rjmp	TOV0_is_set				;jump if set
         ;* ...							;otherwise do something else
         ;***************************************************************************
         
         ;***** Specify Device
          .device AT90S8535
         
         ;***** I/O Register Definitions
          .equ	SREG	=$3f
          .equ	SPH		=$3e
          .equ	SPL		=$3d
          .equ	GIMSK	=$3b
          .equ	GIFR	=$3a
          .equ	TIMSK	=$39
          .equ	TIFR	=$38
          .equ	MCUCR	=$35
          .equ	MCUSR	=$34
          .equ	TCCR0	=$33
          .equ	TCNT0	=$32
          .equ	TCCR1A	=$2f
          .equ	TCCR1B	=$2e
          .equ	TCNT1H	=$2d
          .equ	TCNT1L	=$2c
          .equ	OCR1AH	=$2b
          .equ	OCR1AL	=$2a
          .equ	OCR1BH	=$29
          .equ	OCR1BL	=$28
          .equ	ICR1H	=$27
          .equ	ICR1L	=$26
          .equ	TCCR2	=$25
          .equ	TCNT2	=$24
          .equ	OCR2	=$23
          .equ	ASSR	=$22
          .equ	WDTCR	=$21
          .equ	EEARH	=$1f
          .equ	EEARL	=$1e
          .equ	EEDR	=$1d
          .equ	EECR	=$1c
          .equ	PORTA	=$1b
          .equ	DDRA	=$1a
          .equ	PINA	=$19
          .equ	PORTB	=$18
          .equ	DDRB	=$17
          .equ	PINB	=$16
          .equ	PORTC	=$15
          .equ	DDRC	=$14
          .equ	PINC	=$13
          .equ	PORTD	=$12
          .equ	DDRD	=$11
          .equ	PIND	=$10
          .equ	SPDR	=$0f
          .equ	SPSR	=$0e
          .equ	SPCR	=$0d
          .equ	UDR		=$0c
          .equ	USR		=$0b
          .equ	UCR		=$0a
          .equ	UBRR	=$09
          .equ	ACSR	=$08
          .equ    ADMUX   =$07
          .equ    ADCSR   =$06
          .equ    ADCH    =$05
          .equ    ADCL    =$04
         
         
         ;***** Bit Definitions
         ;MCUSR
          .equ	EXTRF	=1
          .equ	PORF	=0
         
         ;GIMSK
          .equ	INT1	=7
          .equ	INT0	=6
         
         ;GIFR
          .equ	INTF1	=7
          .equ	INTF0	=6
         
         ;TIMSK
          .equ	OCIE2	=7
          .equ	TOIE2	=6
          .equ	TICIE1	=5
          .equ	OCIE1A	=4
          .equ	OCIE1B	=3
          .equ	TOIE1	=2
          .equ	TOIE0	=0
         
         ;TIFR
          .equ	OCF2	=7
          .equ	TOV2	=6
          .equ	ICF1	=5
          .equ	OCF1A	=4
          .equ	OCF1B	=3
          .equ	TOV1	=2
          .equ	TOV0	=0
         
         ;MCUCR
          .equ	SE		=6
          .equ	SM1		=5
          .equ	SM0		=4
          .equ	ISC11	=3
          .equ	ISC10	=2
          .equ	ISC01	=1
          .equ	ISC00	=0
         
         ;TCCR0
          .equ	CS02	=2
          .equ	CS01	=1
          .equ	CS00	=0
         
         ;TCCR1A
          .equ	COM1A1	=7
          .equ	COM1A0	=6
          .equ	COM1B1	=5
          .equ	COM1B0	=4
          .equ	PWM11	=1
          .equ	PWM10	=0
         
         ;TCCR1B
          .equ	ICNC1	=7
          .equ	ICES1	=6
          .equ	CTC1	=3
          .equ	CS12	=2
          .equ	CS11	=1
          .equ	CS10	=0
         
         ;TCCR2
          .equ	PWM2	=6
          .equ	COM21	=5
          .equ	COM20	=4
          .equ	CTC2	=3
          .equ	CS22	=2
          .equ	CS21	=1
          .equ	CS20	=0
         
         ;ASSR
          .equ	AS2		=3
          .equ	TCN2UB	=2
          .equ	OCR2UB	=1
          .equ	TCR2UB	=0
         
         ;WDTCR
          .equ	WDTOE	=4
          .equ	WDE		=3
          .equ	WDP2	=2
          .equ	WDP1	=1
          .equ	WDP0	=0
         
         ;EECR
          .equ	EERIE	=3
          .equ	EEMWE	=2
          .equ	EEWE	=1
          .equ	EERE	=0
         
         ;PORTA
          .equ	PA7		=7
          .equ	PA6		=6
          .equ	PA5		=5
          .equ	PA4		=4
          .equ	PA3		=3
          .equ	PA2		=2
          .equ	PA1		=1
          .equ	PA0		=0
         
         ;DDRA
          .equ	DDA7	=7
          .equ	DDA6	=6
          .equ	DDA5	=5
          .equ	DDA4	=4
          .equ	DDA3	=3
          .equ	DDA2	=2
          .equ	DDA1	=1
          .equ	DDA0	=0
         
         ;PINA
          .equ	PINA7	=7
          .equ	PINA6	=6
          .equ	PINA5	=5
          .equ	PINA4	=4
          .equ	PINA3	=3
          .equ	PINA2	=2
          .equ	PINA1	=1
          .equ	PINA0	=0
         
         ;PORTB
          .equ	PB7		=7
          .equ	PB6		=6
          .equ	PB5		=5
          .equ	PB4		=4
          .equ	PB3		=3
          .equ	PB2		=2
          .equ	PB1		=1
          .equ	PB0		=0
         
         ;DDRB
          .equ	DDB7	=7
          .equ	DDB6	=6
          .equ	DDB5	=5
          .equ	DDB4	=4
          .equ	DDB3	=3
          .equ	DDB2	=2
          .equ	DDB1	=1
          .equ	DDB0	=0
         
         ;PINB
          .equ	PINB7	=7
          .equ	PINB6	=6
          .equ	PINB5	=5
          .equ	PINB4	=4
          .equ	PINB3	=3
          .equ	PINB2	=2
          .equ	PINB1	=1
          .equ	PINB0	=0
         
         ;PORTC
          .equ	PC7		=7
          .equ	PC6		=6
          .equ	PC5		=5
          .equ	PC4		=4
          .equ	PC3		=3
          .equ	PC2		=2
          .equ	PC1		=1
          .equ	PC0		=0
         
         ;DDRC
          .equ	DDC7	=7
          .equ	DDC6	=6
          .equ	DDC5	=5
          .equ	DDC4	=4
          .equ	DDC3	=3
          .equ	DDC2	=2
          .equ	DDC1	=1
          .equ	DDC0	=0
         
         ;PINC
          .equ	PINC7	=7
          .equ	PINC6	=6
          .equ	PINC5	=5
          .equ	PINC4	=4
          .equ	PINC3	=3
          .equ	PINC2	=2
          .equ	PINC1	=1
          .equ	PINC0	=0
         
         ;PORTD
          .equ	PD7		=7
          .equ	PD6		=6
          .equ	PD5		=5
          .equ	PD4		=4
          .equ	PD3		=3
          .equ	PD2		=2
          .equ	PD1		=1
          .equ	PD0		=0
         
         ;DDRD
          .equ	DDD7	=7
          .equ	DDD6	=6
          .equ	DDD5	=5
          .equ	DDD4	=4
          .equ	DDD3	=3
          .equ	DDD2	=2
          .equ	DDD1	=1
          .equ	DDD0	=0
         
         ;PIND
          .equ	PIND7	=7
          .equ	PIND6	=6
          .equ	PIND5	=5
          .equ	PIND4	=4
          .equ	PIND3	=3
          .equ	PIND2	=2
          .equ	PIND1	=1
          .equ	PIND0	=0
         
         ;SPCR
          .equ	SPIE	=7
          .equ	SPE		=6
          .equ	DORD	=5
          .equ	MSTR	=4
          .equ	CPOL	=3
          .equ	CPHA	=2
          .equ	SPR1	=1
          .equ	SPR0	=0
         
         ;SPSR
          .equ	SPIF	=7
          .equ	WCOL	=6
         
         ;USR
          .equ	RXC		=7
          .equ	TXC		=6
          .equ	UDRE	=5
          .equ	FE		=4
          .equ	OR		=3
         
         ;RXCIE
          .equ	RXCIE	=7
          .equ	TXCIE	=6
          .equ	UDRIE	=5
          .equ	RXEN	=4
          .equ	TXEN	=3
          .equ	CHR9	=2
          .equ	RXB8	=1
          .equ	TXB8	=0
         
         ;ACSR
          .equ	ACD		=7
          .equ	ACO		=5
          .equ	ACI		=4
          .equ	ACIE	=3
          .equ	ACIC	=2
          .equ	ACIS1	=1
          .equ	ACIS0	=0
         
         ;ADMUX
          .equ	MUX2	=2
          .equ	MUX1	=1
          .equ	MUX0	=0
         
         ;ADCSR
          .equ	ADEN	=7
          .equ	ADSC	=6
          .equ	ADFR	=5
          .equ	ADIF	=4
          .equ	ADIE	=3
          .equ	ADPS2	=2
          .equ	ADPS1	=1
          .equ	ADPS0	=0
         
          .def	XL		=r26
          .def	XH		=r27
          .def	YL		=r28
          .def	YH		=r29
          .def	ZL		=r30
          .def	ZH		=r31
         
          .equ 	RAMEND  =$25F	;Last On-Chip SRAM location
          .equ	XRAMEND =$25F
          .equ	E2END	=$1FF
          .equ	FLASHEND=$FFF
         
          .equ	INT0addr=$001	;External Interrupt0 Vector Address
          .equ	INT1addr=$002	;External Interrupt1 Vector Address
          .equ	OC2addr =$003	;Timer2 compare match Vector Address
          .equ	OVF2addr=$004	;Timer2 overflow Vector Address
          .equ	ICP1addr=$005	;Timer1 Input Capture Vector Address
          .equ	OC1Aaddr=$006	;Timer1 Output Compare A Interrupt Vector Address
          .equ	OC1Baddr=$007	;Timer1 Output Compare B Interrupt Vector Address
          .equ	OVF1addr=$008	;Overflow1 Interrupt Vector Address
          .equ	OVF0addr=$009	;Overflow0 Interrupt Vector Address
          .equ	SPIaddr =$00A	;SPI Interrupt Vector Address
          .equ	URXCaddr=$00B	;UART Receive Complete Interrupt Vector Address
          .equ	UDREaddr=$00C	;UART Data Register Empty Interrupt Vector Address
          .equ	UTXCaddr=$00D	;UART Transmit Complete Interrupt Vector Address
          .equ	ADCCaddr=$00E	;ADC Conversion Complete Interrupt Vector Address
          .equ	ERDYaddr=$00F	;EEPROM Write Complete Interrupt Vector Address
          .equ	ACIaddr =$010	;Analog Comparator Interrupt Vector Address
         	
          	.def 	Temp1 = R16
          	.def	NumC = R17
          	.def	Tmp1 = R18
          	.def	Tmp2 = R19
          	.def	Tmp3 = R20
          	.equ	MaxC = 200 	;Number of iterations of our 1ms delay loop
          	.def 	SegPattern = R0
          	.def 	CountPress = R21
          	.equ 	MaxCount = 10
          	.def	NumTicks = R22
          	.equ	MaxTicks = 25	;equals a debounce of approx 200 ms at fc/256
          	.def	IntFlag = R23	;Flagged when interrupts are disallowed
         	
          	.cseg
          	.org 	$000
000000 c010      Reset:	rjmp 	Start
         
          	.org	$001
000001 c036      	rjmp	EXT_INT0	;External interrupt 0 handler
         
          	.org	$009
000009 c04e      	rjmp	TIM0_OVF	;Timer 0 overflow interrupt handler
         	
          	.org	$011		;Place the code after the interrupt vectors
         	
000011 e50f      Start:	ldi	Temp1,LOW(RAMEND)
000012 bf0d      	out	SPL,Temp1
000013 e002      	ldi	Temp1,HIGH(RAMEND)
000014 bf0e      	out	SPH,Temp1
         
         	;Do the configuration necessary for the counter
000015 2755      	clr	CountPress	;begin with a zero count on CountPress
000016 2777      	clr	IntFlag		;Flag is all zero's, interrupts allowed
         	;configure port C bits 0 to 7 as outputs
000017 ef0f      	ser	Temp1		;makes temp1 all 1's
000018 bb04      	out	DDRC,Temp1	;set as outputs	
         	;point the Z register at the first entry of the lookup table
000019 e0ec      	ldi	ZL,LOW(Sevenseg*2)
00001a e0f1      	ldi	ZH,HIGH(Sevenseg*2)	
         	;write 0 to the output to begin
00001b 95c8      	lpm			;loads Z destination into R0
00001c ba05      	out	PORTC,SegPattern
         
         	;Configure PORTB, bit 0 to be an output for the square wave
00001d 9ab8      	sbi	DDRB,DDB0	;Sets bit 0 in DDRB to 1, thus output
00001e 98c0      	cbi	PORTB,0		;Set bit 0 to 0 initially
         	;Configure PORTB, bit 1 to be an output, flag for the INT_0 off
00001f 9ab9      	sbi	DDRB,DDB1
000020 98c1      	cbi	PORTB,1
         	
         	;Perform the configuration necessary to make INT0 an input,
         	;make the INT0 interrupt work on a falling edge, set the masks
         	;to enable the interrupts and enable interrupts globally.
         
         	;Make INT0 an input. INT0 is PORTD line PD2. Enable pullup resistor
000021 988a      	cbi	DDRD,DDD2	;PORTD Bit 2 an input
000022 9a92      	sbi	PORTD,2		;Turn on the pullup resistor
         
         	;Configure to interrupt on a falling edge
000023 b705      	in	Temp1,MCUCR	;Get the current config of MCUCR
000024 6002      	sbr	Temp1,0b00000010	;Temp1 = Temp1 OR 0b00000010
000025 bf05      	out	MCUCR,Temp1	;Write out the new config
         
         	;Configure the general interrupt mask register and the timing mask
000026 b70b      	in	Temp1,GIMSK
000027 6400      	sbr	Temp1,0b01000000
000028 bf0b      	out	GIMSK,Temp1
000029 b709      	in	Temp1,TIMSK
00002a 6001      	sbr	Temp1,0b00000001
00002b bf09      	out	TIMSK,Temp1
         	
         	;Stop the timer and clear any interrupts which may be queued
00002c b703      	in	Temp1,TCCR0	;get the current config of timer 0
00002d 6000      	sbr	Temp1,0b00000000	;STOP THE CLOCK!
00002e bf03      	out	TCCR0,Temp1	;write out the new timer config
         	;Clear the interrupt bit
00002f b70a      	in	Temp1,GIFR
000030 6400      	sbr	Temp1,0b01000000
000031 bf0a      	out	GIFR,Temp1
         
         	;Now enable interrupts globally
000032 9478      	sei
         
          Main:	;Do stuff in main to show that stuff is happening
         	;We need to toggle PORT B bit 0 every 200 ms
         	;Clear bit, delay, set bit, delay
000033 98c0      	cbi	PORTB,0
000034 d041      	rcall	Delaye
000035 9ac0      	sbi	PORTB,0
000036 d03f      	rcall	Delaye
000037 cffb      	rjmp	Main
         
         
         ;This code is what is called whenever interrupts occur
         
         ;The press button interrupt handler
000038 930f      EXT_INT0:	push Temp1	;Temp1 is our working register, save it
000039 b70f      	in	Temp1,SREG	;Load the system register into Temp1
00003a 930f      	push	Temp1		;Save the system register
         	
         	;DO STUFF: Note that only falling edge interrupts will be generated
         	;1) Disable INT_0
00003b b70b      	in	Temp1,GIMSK
00003c 7b0f      	cbr	Temp1,0b01000000
00003d bf0b      	out	GIMSK,Temp1
00003e ef7f      	ldi	IntFlag,0b11111111	;Wasteful flag set. No interupt allowed
00003f 9ac1      	sbi	PORTB,1			;PORTB1 will be high whever interrupts
         					;are not allowed
         
         	;2) Update display
000040 9553      	inc 	CountPress
000041 305a      	cpi	CountPress,MaxCount	; Is CountPress < MaxCount?
000042 f409      	brne	Display			; no
000043 2755      	clr	CountPress		; yes
         
000044 935f      Display: push	CountPress	;push value onto stack
000045 0f55      	lsl	CountPress	;Logical Shift Left (x2)
000046 0fe5      	add	ZL,CountPress	;Adjust pointer to point to lookup table
000047 915f      	pop	CountPress	;restore value from stack
000048 2700      	clr	Temp1
000049 1ff0      	adc	ZH,Temp1	;Add the carry bits to ZH
00004a 95c8      	lpm			;Puts value of Z into R0
00004b ba05      	out	PORTC,SegPattern
         		
         	;now reset pointer Z to first spot in stack
00004c e0ec      	ldi	ZL,LOW(Sevenseg*2)
00004d e0f1      	ldi	ZH,HIGH(Sevenseg*2)
         
         	;3) Initialise and start TIMER 0
         	;Set the initial count to zero
00004e e000      	ldi	Temp1,0b00000000
00004f bf02      	out	TCNT0,Temp1
000050 2766      	clr	NumTicks	;set the number of overflows to zero
         	;We need to select a clock speed
000051 b703      	in	Temp1,TCCR0	;get the current config of timer 0
000052 6004      	sbr	Temp1,0b00000100	;select CK/256 as the clock speed
000053 bf03      	out	TCCR0,Temp1	;write out the new timer config (starts timer)
         
         	;4) Return from interrupt
000054 910f      	pop	Temp1		;Pop the system register into Temp1
000055 bf0f      	out	SREG,Temp1	;Load it back into memory
000056 910f      	pop	Temp1		;restore the working register
000057 9518      	reti
         
000058 930f      TIM0_OVF:	push Temp1	;yada, same as before
000059 b70f      	in	Temp1,SREG
00005a 930f      	push	Temp1
         
         	;Increment the number of clock overflow interrupts
00005b 9563      	inc	NumTicks
         
         	;Stop the timer
00005c b703      	in	Temp1,TCCR0	;get the current config of timer 0
00005d 6000      	sbr	Temp1,0b00000000	;STOP THE CLOCK!
00005e bf03      	out	TCCR0,Temp1	;write out the new timer config
         	;see whether we have reached the correct number of overflows
00005f 3169      	cpi	NumTicks,MaxTicks	;Is NumTicks < MaxTicks?
000060 f449      	brne	Endero			;yes => restart timer
         	;no => clear INT_0, enable INT_0, reset NumTicks, restart timer
         	;Here we need to clear any pending INT_0 interrupts
         	;and re-enable INT_0, also reset NumTicks
         	;Clear the interrupt bit
000061 b70a      	in	Temp1,GIFR
000062 6400      	sbr	Temp1,0b01000000
000063 bf0a      	out	GIFR,Temp1
         	;enable the INT0 interrupt
000064 b70b      	in	Temp1,GIMSK
000065 6400      	sbr	Temp1,0b01000000
000066 bf0b      	out	GIMSK,Temp1
000067 e070      	ldi	IntFlag,0b00000000	;clear the flag
000068 98c1      	cbi	PORTB,1
         	;Reset NumTicks
000069 2766      	clr	NumTicks
          Endero:
         	;clear the timer overflow interrupt
00006a b708      	in	Temp1,TIFR
00006b 7f0e      	cbr	Temp1,0b00000001
00006c bf08      	out	TIFR,Temp1
         	;Clear the timer
00006d e000      	ldi	Temp1,0b00000000
00006e bf02      	out	TCNT0,Temp1
         	;restart the timer
00006f b703      	in	Temp1,TCCR0	;get the current config of timer 0
000070 6004      	sbr	Temp1,0b00000100	;select CK/256 as the clock speed
000071 bf03      	out	TCCR0,Temp1	;write out the new timer config (starts timer)
         	
000072 910f      	pop 	Temp1
000073 bf0f      	out 	SREG,Temp1
000074 910f      	pop	Temp1
000075 9518      	reti
         
         ;This loops for MaxC milliseconds	
000076 2711      Delaye:	clr	NumC		;NumC = 0
000077 d004      Step1:	rcall 	Delay		;Delay for 1ms
000078 9513      	inc	NumC		;NumC = NumC + 1
000079 3c18      	cpi	NumC,MaxC	;Is NumC == MaxC?
00007a f7e1      	brne	Step1		;No
00007b 9508      	ret			;yes
         	
         
00007c e02d      Delay:	ldi 	Tmp1,$0D
00007d e636      Del1:	ldi	Tmp2,$66
00007e e041      Del2:	ldi	Tmp3,1		
00007f 954a      Del3:	dec	Tmp3
000080 f7f1      	brne	Del3
000081 953a      	dec	Tmp2
000082 f7d9      	brne	Del2
000083 952a      	dec	Tmp1
000084 f7c1      	brne	Del1
000085 9508      	ret		
         
         	;Values for Tmp1,Tmp2 and Tmp3 with the resulting cycle time
         	;$FF,$FF,6 => 1366294 cycles => 170 ms
         	;$FF,$FF,5 => 1171222 cycles => 146 ms
         	;$FF,$FF,1 => 390922 cycles => 48.8 ms
         	;$0F,$FF,1 => 23002 cycles => 2.88 ms
         	;$0F,$0F,1 => 1402 cycles => 0.175 ms
         	;$0F,$59,1 => 8071 cycles
         	;$0E,$5F,1 => 8038 cycles
         	;$0D,$66,1 => 8002 cycles => 1.00 ms. Hurrah!
         
         ;Lookup table
          Sevenseg:
          	.dw	$73	; 9
000086 0073
          	.dw	$7F	; 8
000087 007f
          	.dw	$70	; 7
000088 0070
          	.dw	$5F	; 6
000089 005f
          	.dw	$5B	; 5
00008a 005b
          	.dw	$33	; 4
00008b 0033
          	.dw	$79	; 3
00008c 0079
          	.dw	$6D	; 2
00008d 006d
          	.dw	$30	; 1
00008e 0030
          	.dw	$7E	; 000008f 007e

Assembly complete with no errors.
