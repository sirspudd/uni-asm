
AVRASM ver. 1.54  C:\code\question3.asm Wed Jun 01 09:03:37 2005


         ;Donald Carr
         ;Dumb a2d
         ;HI TECH VOLTO METER
         ;DONALD CARR
         ;AREF = 4.096
         
          .include "8535def.inc"
         ;***************************************************************************
         ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
         ;* 
         ;* Number				:AVR000
         ;* File Name			:"8535def.inc"
         ;* Title				:Register/Bit Definitions for the AT90S8535
         ;* Date                 :99.01.28
         ;* Version              :1.30
         ;* Support telephone	:+47 72 88 43 88 (ATMEL Norway)
         ;* Support fax			:+47 72 88 43 99 (ATMEL Norway)
         ;* Support E-mail		:avr@atmel.com
         ;* Target MCU			:AT90S8535
         ;*
         ;* DESCRIPTION
         ;* When including this file in the assembly program file, all I/O register	
         ;* names and I/O register bit names appearing in the data book can be used.
         ;* In addition, the six registers forming the three data pointers X, Y and
         ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
         ;* SRAM is also defined 
         ;*
         ;* The Register names are represented by their hexadecimal address.
         ;* 
         ;* The Register Bit names are represented by their bit number (0-7).
         ;* 
         ;* Please observe the difference in using the bit names with instructions
         ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc" 
         ;* (skip if bit in register set/cleared). The following example illustrates
         ;* this:
         ;* 
         ;* in	r16,PORTB				;read PORTB latch
         ;* sbr	r16,(1<<PB6)+(1<<PB5)	;set PB6 and PB5 (use masks, not bit#)
         ;* out  PORTB,r16				;output to PORTB
         ;*
         ;* in	r16,TIFR				;read the Timer Interrupt Flag Register
         ;* sbrc	r16,TOV0				;test the overflow flag (use bit#)
         ;* rjmp	TOV0_is_set				;jump if set
         ;* ...							;otherwise do something else
         ;***************************************************************************
         
         ;***** Specify Device
          .device AT90S8535
         
         ;***** I/O Register Definitions
          .equ	SREG	=$3f
          .equ	SPH		=$3e
          .equ	SPL		=$3d
          .equ	GIMSK	=$3b
          .equ	GIFR	=$3a
          .equ	TIMSK	=$39
          .equ	TIFR	=$38
          .equ	MCUCR	=$35
          .equ	MCUSR	=$34
          .equ	TCCR0	=$33
          .equ	TCNT0	=$32
          .equ	TCCR1A	=$2f
          .equ	TCCR1B	=$2e
          .equ	TCNT1H	=$2d
          .equ	TCNT1L	=$2c
          .equ	OCR1AH	=$2b
          .equ	OCR1AL	=$2a
          .equ	OCR1BH	=$29
          .equ	OCR1BL	=$28
          .equ	ICR1H	=$27
          .equ	ICR1L	=$26
          .equ	TCCR2	=$25
          .equ	TCNT2	=$24
          .equ	OCR2	=$23
          .equ	ASSR	=$22
          .equ	WDTCR	=$21
          .equ	EEARH	=$1f
          .equ	EEARL	=$1e
          .equ	EEDR	=$1d
          .equ	EECR	=$1c
          .equ	PORTA	=$1b
          .equ	DDRA	=$1a
          .equ	PINA	=$19
          .equ	PORTB	=$18
          .equ	DDRB	=$17
          .equ	PINB	=$16
          .equ	PORTC	=$15
          .equ	DDRC	=$14
          .equ	PINC	=$13
          .equ	PORTD	=$12
          .equ	DDRD	=$11
          .equ	PIND	=$10
          .equ	SPDR	=$0f
          .equ	SPSR	=$0e
          .equ	SPCR	=$0d
          .equ	UDR		=$0c
          .equ	USR		=$0b
          .equ	UCR		=$0a
          .equ	UBRR	=$09
          .equ	ACSR	=$08
          .equ    ADMUX   =$07
          .equ    ADCSR   =$06
          .equ    ADCH    =$05
          .equ    ADCL    =$04
         
         
         ;***** Bit Definitions
         ;MCUSR
          .equ	EXTRF	=1
          .equ	PORF	=0
         
         ;GIMSK
          .equ	INT1	=7
          .equ	INT0	=6
         
         ;GIFR
          .equ	INTF1	=7
          .equ	INTF0	=6
         
         ;TIMSK
          .equ	OCIE2	=7
          .equ	TOIE2	=6
          .equ	TICIE1	=5
          .equ	OCIE1A	=4
          .equ	OCIE1B	=3
          .equ	TOIE1	=2
          .equ	TOIE0	=0
         
         ;TIFR
          .equ	OCF2	=7
          .equ	TOV2	=6
          .equ	ICF1	=5
          .equ	OCF1A	=4
          .equ	OCF1B	=3
          .equ	TOV1	=2
          .equ	TOV0	=0
         
         ;MCUCR
          .equ	SE		=6
          .equ	SM1		=5
          .equ	SM0		=4
          .equ	ISC11	=3
          .equ	ISC10	=2
          .equ	ISC01	=1
          .equ	ISC00	=0
         
         ;TCCR0
          .equ	CS02	=2
          .equ	CS01	=1
          .equ	CS00	=0
         
         ;TCCR1A
          .equ	COM1A1	=7
          .equ	COM1A0	=6
          .equ	COM1B1	=5
          .equ	COM1B0	=4
          .equ	PWM11	=1
          .equ	PWM10	=0
         
         ;TCCR1B
          .equ	ICNC1	=7
          .equ	ICES1	=6
          .equ	CTC1	=3
          .equ	CS12	=2
          .equ	CS11	=1
          .equ	CS10	=0
         
         ;TCCR2
          .equ	PWM2	=6
          .equ	COM21	=5
          .equ	COM20	=4
          .equ	CTC2	=3
          .equ	CS22	=2
          .equ	CS21	=1
          .equ	CS20	=0
         
         ;ASSR
          .equ	AS2		=3
          .equ	TCN2UB	=2
          .equ	OCR2UB	=1
          .equ	TCR2UB	=0
         
         ;WDTCR
          .equ	WDTOE	=4
          .equ	WDE		=3
          .equ	WDP2	=2
          .equ	WDP1	=1
          .equ	WDP0	=0
         
         ;EECR
          .equ	EERIE	=3
          .equ	EEMWE	=2
          .equ	EEWE	=1
          .equ	EERE	=0
         
         ;PORTA
          .equ	PA7		=7
          .equ	PA6		=6
          .equ	PA5		=5
          .equ	PA4		=4
          .equ	PA3		=3
          .equ	PA2		=2
          .equ	PA1		=1
          .equ	PA0		=0
         
         ;DDRA
          .equ	DDA7	=7
          .equ	DDA6	=6
          .equ	DDA5	=5
          .equ	DDA4	=4
          .equ	DDA3	=3
          .equ	DDA2	=2
          .equ	DDA1	=1
          .equ	DDA0	=0
         
         ;PINA
          .equ	PINA7	=7
          .equ	PINA6	=6
          .equ	PINA5	=5
          .equ	PINA4	=4
          .equ	PINA3	=3
          .equ	PINA2	=2
          .equ	PINA1	=1
          .equ	PINA0	=0
         
         ;PORTB
          .equ	PB7		=7
          .equ	PB6		=6
          .equ	PB5		=5
          .equ	PB4		=4
          .equ	PB3		=3
          .equ	PB2		=2
          .equ	PB1		=1
          .equ	PB0		=0
         
         ;DDRB
          .equ	DDB7	=7
          .equ	DDB6	=6
          .equ	DDB5	=5
          .equ	DDB4	=4
          .equ	DDB3	=3
          .equ	DDB2	=2
          .equ	DDB1	=1
          .equ	DDB0	=0
         
         ;PINB
          .equ	PINB7	=7
          .equ	PINB6	=6
          .equ	PINB5	=5
          .equ	PINB4	=4
          .equ	PINB3	=3
          .equ	PINB2	=2
          .equ	PINB1	=1
          .equ	PINB0	=0
         
         ;PORTC
          .equ	PC7		=7
          .equ	PC6		=6
          .equ	PC5		=5
          .equ	PC4		=4
          .equ	PC3		=3
          .equ	PC2		=2
          .equ	PC1		=1
          .equ	PC0		=0
         
         ;DDRC
          .equ	DDC7	=7
          .equ	DDC6	=6
          .equ	DDC5	=5
          .equ	DDC4	=4
          .equ	DDC3	=3
          .equ	DDC2	=2
          .equ	DDC1	=1
          .equ	DDC0	=0
         
         ;PINC
          .equ	PINC7	=7
          .equ	PINC6	=6
          .equ	PINC5	=5
          .equ	PINC4	=4
          .equ	PINC3	=3
          .equ	PINC2	=2
          .equ	PINC1	=1
          .equ	PINC0	=0
         
         ;PORTD
          .equ	PD7		=7
          .equ	PD6		=6
          .equ	PD5		=5
          .equ	PD4		=4
          .equ	PD3		=3
          .equ	PD2		=2
          .equ	PD1		=1
          .equ	PD0		=0
         
         ;DDRD
          .equ	DDD7	=7
          .equ	DDD6	=6
          .equ	DDD5	=5
          .equ	DDD4	=4
          .equ	DDD3	=3
          .equ	DDD2	=2
          .equ	DDD1	=1
          .equ	DDD0	=0
         
         ;PIND
          .equ	PIND7	=7
          .equ	PIND6	=6
          .equ	PIND5	=5
          .equ	PIND4	=4
          .equ	PIND3	=3
          .equ	PIND2	=2
          .equ	PIND1	=1
          .equ	PIND0	=0
         
         ;SPCR
          .equ	SPIE	=7
          .equ	SPE		=6
          .equ	DORD	=5
          .equ	MSTR	=4
          .equ	CPOL	=3
          .equ	CPHA	=2
          .equ	SPR1	=1
          .equ	SPR0	=0
         
         ;SPSR
          .equ	SPIF	=7
          .equ	WCOL	=6
         
         ;USR
          .equ	RXC		=7
          .equ	TXC		=6
          .equ	UDRE	=5
          .equ	FE		=4
          .equ	OR		=3
         
         ;RXCIE
          .equ	RXCIE	=7
          .equ	TXCIE	=6
          .equ	UDRIE	=5
          .equ	RXEN	=4
          .equ	TXEN	=3
          .equ	CHR9	=2
          .equ	RXB8	=1
          .equ	TXB8	=0
         
         ;ACSR
          .equ	ACD		=7
          .equ	ACO		=5
          .equ	ACI		=4
          .equ	ACIE	=3
          .equ	ACIC	=2
          .equ	ACIS1	=1
          .equ	ACIS0	=0
         
         ;ADMUX
          .equ	MUX2	=2
          .equ	MUX1	=1
          .equ	MUX0	=0
         
         ;ADCSR
          .equ	ADEN	=7
          .equ	ADSC	=6
          .equ	ADFR	=5
          .equ	ADIF	=4
          .equ	ADIE	=3
          .equ	ADPS2	=2
          .equ	ADPS1	=1
          .equ	ADPS0	=0
         
          .def	XL		=r26
          .def	XH		=r27
          .def	YL		=r28
          .def	YH		=r29
          .def	ZL		=r30
          .def	ZH		=r31
         
          .equ 	RAMEND  =$25F	;Last On-Chip SRAM location
          .equ	XRAMEND =$25F
          .equ	E2END	=$1FF
          .equ	FLASHEND=$FFF
         
          .equ	INT0addr=$001	;External Interrupt0 Vector Address
          .equ	INT1addr=$002	;External Interrupt1 Vector Address
          .equ	OC2addr =$003	;Timer2 compare match Vector Address
          .equ	OVF2addr=$004	;Timer2 overflow Vector Address
          .equ	ICP1addr=$005	;Timer1 Input Capture Vector Address
          .equ	OC1Aaddr=$006	;Timer1 Output Compare A Interrupt Vector Address
          .equ	OC1Baddr=$007	;Timer1 Output Compare B Interrupt Vector Address
          .equ	OVF1addr=$008	;Overflow1 Interrupt Vector Address
          .equ	OVF0addr=$009	;Overflow0 Interrupt Vector Address
          .equ	SPIaddr =$00A	;SPI Interrupt Vector Address
          .equ	URXCaddr=$00B	;UART Receive Complete Interrupt Vector Address
          .equ	UDREaddr=$00C	;UART Data Register Empty Interrupt Vector Address
          .equ	UTXCaddr=$00D	;UART Transmit Complete Interrupt Vector Address
          .equ	ADCCaddr=$00E	;ADC Conversion Complete Interrupt Vector Address
          .equ	ERDYaddr=$00F	;EEPROM Write Complete Interrupt Vector Address
          .equ	ACIaddr =$010	;Analog Comparator Interrupt Vector Address
         
          .def	Temp1 = R16
          .def	Temp2 = R17
          .def	Temp3 = R18
          .def	tho = R19
          .def	hun = R20
          .def	ten = R21
          .def	unit = R22
         
          .equ	baud = 207
         
          .cseg
          .org $000
         
000000 c010      Reset : rjmp	Start
         
          	.org $011
         	
000011 e50f      Start :		ldi Temp1,LOW(RAMEND)
000012 bf0d      		out SPL,Temp1
000013 e002      		ldi Temp1,HIGH(RAMEND)
000014 bf0e      		out SPH,Temp1
         		
         ;		;Set baud rate
000015 ec0f      		ldi 	Temp1,baud
000016 b909      		out	UBRR,Temp1
         		;Enable the receiver and transmittor
000017 e108      		ldi 	Temp1,0b00011000
000018 b90a      		out	UCR,Temp1
         		;Hopefully configure a2d
000019 e000      		ldi 	Temp1,0b00000000
00001a b907      		out	ADMUX,Temp1
00001b ee00      		ldi 	Temp1,0b11100000
00001c b906      		out	ADCSR,Temp1
         
         ;repeat ad finitum
         			
00001d 9b5f      Waitchar: 	sbis	USR,RXC
00001e cffe      		rjmp	Waitchar
00001f b10c      		in	Temp1,UDR
         		;Check for certain char
000020 3506      		cpi	Temp1,86
000021 f009      		breq	pondernavel
000022 cffa      		rjmp	Waitchar
         
000023 9b34      pondernavel: 	sbis	ADCSR,ADIF
000024 cffe      		rjmp	pondernavel	
000025 d001      		rcall	carpe
000026 cff6      		rjmp	Waitchar
         		
000027 9834      carpe:		cbi	ADCSR,ADIF
000028 b104      		in	Temp1,ADCL
000029 b115      		in	Temp2,ADCH
00002a d003      		rcall	FourTimes
00002b d022      		rcall 	Convert
00002c d006      		rcall 	OutLoop
         		;Delay
00002d 9508      		ret
         
00002e 0f00      FourTimes:	lsl	Temp1
00002f 1f11      		rol	Temp2
000030 0f00      		lsl	Temp1
000031 1f11      		rol	Temp2
000032 9508      		ret
         
000033 2f03      OutLoop:	mov	Temp1,Tho
000034 5d00      		subi	Temp1,-48
000035 d00b      		rcall	Waitclear
000036 2f04      		mov	Temp1,hun
000037 5d00      		subi	Temp1,-48
000038 d008      		rcall	Waitclear
000039 2f05      		mov	Temp1,ten
00003a 5d00      		subi	Temp1,-48
00003b d005      		rcall	Waitclear
00003c 2f06      		mov	Temp1,unit
00003d 5d00      		subi	Temp1,-48
00003e d002      		rcall	Waitclear
00003f d005      		rcall	LineFeed
000040 9508      		ret	
         
         
         ;This is a generic send method, will be call with each send
000041 9b5d      Waitclear:	sbis	USR,UDRE
000042 cffe      		rjmp	Waitclear
000043 b90c      		out	UDR,Temp1
000044 9508      		ret
         		
000045 9b5d      LineFeed:	sbis	USR,UDRE
000046 cffe      		rjmp	LineFeed
000047 e00d      		ldi	Temp1,$0D
000048 b90c      		out	UDR,Temp1
         		
000049 9b5d      Carriage:	sbis	USR,UDRE
00004a cffe      		rjmp	Carriage
00004b e00a      		ldi	Temp1,$0A
00004c b90c      		out	UDR,Temp1
         		
00004d 9508      		ret
         		
00004e 930f      Convert:	push	Temp1
00004f 931f      		push	Temp2
000050 932f      		push	Temp3
         		
000051 2733      		clr	tho
000052 2744      		clr	hun
000053 2755      		clr	ten
000054 2766      		clr	unit
         
000055 5e08      DoThou:		subi	Temp1,LOW(1000)
000056 4013      		sbci	Temp2,HIGH(1000)
000057 f010      		brcs	NowHun
000058 9533      		inc	tho
000059 cffb      		rjmp	DoThou
         		
00005a ee28      NowHun:		ldi	Temp3,LOW(1000)
00005b 0f02      		add	Temp1,Temp3
00005c e023      		ldi	Temp3,HIGH(1000)
00005d 1f12      		adc	Temp2,Temp3
         		
         
00005e 5604      DoHun:		subi	Temp1,100
00005f 4010      		sbci	Temp2,0
000060 f010      		brcs	NowTen
000061 9543      		inc	hun
000062 cffb      		rjmp	DoHun
         		
000063 e624      NowTen:		ldi	Temp3,100
000064 0f02      		add	Temp1,Temp3
         		
000065 500a      DoTen:		subi	Temp1,10
000066 f010      		brcs	NowUnit
000067 9553      		inc	ten
000068 cffc      		rjmp	DoTen
         		
000069 e02a      NowUnit:	ldi	Temp3,10
00006a 0f02      		add	Temp1,Temp3
00006b 2f60      		mov	unit, Temp1
         		
00006c 910f      		pop	Temp1
00006d 911f      		pop	Temp2
00006e 912f      		pop	Temp3
         		
00006f 9508      		ret
         
          .exit			

Assembly complete with no errors.
